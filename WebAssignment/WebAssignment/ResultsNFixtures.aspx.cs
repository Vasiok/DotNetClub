using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using WebAssignment.Models;
using System.Xml;
using System.Xml.Serialization;
using System.Windows.Forms;
using System.IO;
using System.Web.UI.HtmlControls;

namespace WebAssignment
{
    public partial class ResultsNFixtures : System.Web.UI.Page
    {
        // user access level
        public string userAccess = null;
        public string userName = String.Empty;
        public string adminAccess = "level1";
        public string coachAccess = "level2";
        public bool loginStatus;

        // add static dataset
        static DataSet ds = new DataSet("Games");

        protected void Page_Load(object sender, EventArgs e)
        {
            // SEO Meta tag
            HtmlMeta meta = new HtmlMeta();
            meta.Name = "description";
            meta.Content = "Results and Fixtures Page - The most up to date Dot Net Football game results as well as upcoming fixtures can be found on this page.";
            MetaPlaceHolder.Controls.Add(meta);

            HtmlMeta meta2 = new HtmlMeta();
            meta2.Name = "keywords";
            meta2.Content = "Results and Fixtures, Results, Fixtures, Results and Fixtures Page, Dot Net Football Club, HTML, CSS, XML, JavaScript.";
            MetaPlaceHolder.Controls.Add(meta2);

            HtmlMeta meta3 = new HtmlMeta();
            meta3.Name = "author";
            meta3.Content = "Emma Jane Heneghan, Alex Suleac";
            MetaPlaceHolder.Controls.Add(meta3);

            // setting up session variables
            userAccess = (String)Session["AccessLevel"];
            userName = (String)Session["Username"];

            if (userAccess != null)
            {
                loginStatus = true;
            }
            else
                loginStatus = false;

            // changing login to logout
            if (loginStatus) // equals true -if they are logged in
            {
                loginON.Visible = false; // turn off login 
                loginOFF.Visible = true; // turn on logout
            }
            else if (!loginStatus) // equals false
            {
                loginON.Visible = true;
                loginOFF.Visible = false;
            }


            // content viewable only by coach
            if (userAccess == coachAccess)
            {
                btn4CoachXML.Visible = true;
                coachEditArea.Visible = true;

                PrimeTablesForCoach();
            }
            else
            {
                PrimeTables();
            }




            WelcomeLabel.Text = "Hello " + (String)Session["Username"] + " your Access Level is: " + (String)Session["AccessLevel"];

            if (userAccess == adminAccess)
            {
                adminOnly.Visible = true;
            }

            

        }

        private void PrimeTables()
        {
            dgvFixtures.AutoGenerateDeleteButton = false;
            dgvResults.AutoGenerateDeleteButton = false;

            Context _db = new Context();
            List<GameResult> gameResults = _db.GameResults.ToList();
            List<Fixture> gameFixtures = _db.Fixtures.ToList();

            //filtering result list so we dont have mathces allready played
            gameFixtures = gameFixtures.Where(gf => !gameResults.Any(gr => gr.MatchDate == gf.FutureMatchDate)).ToList();
            var gameFixturesNoId = gameFixtures.Select(gf => new { gf.HomeTeam, gf.AwayTeam, gf.PitchName, gf.FutureMatchDate });

            var gameResultNoId = gameResults.Select(gr => new { gr.HomeTeam, gr.AwayTeam, gr.ScoreHome, gr.ScoreAway, gr.MatchDate });



            dgvResults.DataSource = gameResultNoId.ToList();
            dgvResults.DataBind();
            dgvFixtures.DataSource = gameFixturesNoId.ToList();
            dgvFixtures.DataBind();
        }

        private void PrimeTablesForCoach()
        {
            dgvFixtures.AutoGenerateDeleteButton = true;
            dgvResults.AutoGenerateDeleteButton = true;
            Context _db = new Context();
            List<GameResult> gameResults = _db.GameResults.ToList();
            List<Fixture> gameFixtures = _db.Fixtures.ToList();

            //filtering result list so we dont have mathces allready played
            gameFixtures = gameFixtures.Where(gf => !gameResults.Any(gr => gr.MatchDate == gf.FutureMatchDate)).ToList();

            dgvResults.DataSource = gameResults.ToList();
            dgvResults.DataBind();
            dgvFixtures.DataSource = gameFixtures.ToList();
            dgvFixtures.DataBind();
            
        }



        protected void btnXML_Click(object sender, EventArgs e)
        {
            try
            {
                Context _db = new Context();
                List<GameResult> gamesList = _db.GameResults.ToList();

                // to get rid of any special characters
                string date = DateTime.Now.ToString();
                date = date.Replace(@"/", "_");
                date = date.Replace(@" ", "_TIME_");
                date = date.Replace(@":", "_");

                // give the file a unique file name
                string newfileName = @"\GameXML_DATE_" + date + ".txt";

                string myXML = Serialize(gamesList).ToString();
                string fullDir = Path.Combine(Request.PhysicalApplicationPath) + @"XMLFiles\";

                // Write the stream contents to a new file named "AllTxtFiles.txt".
                using (StreamWriter outfile = new StreamWriter(fullDir + newfileName))
                {
                    outfile.Write(myXML);
                }

                // save the XML to the DB
                DBXml saveXml = new DBXml();
                saveXml.XmlFilename = newfileName;
                saveXml.XmlFile = myXML;

                _db.DBXMLS.Add(saveXml);
                _db.SaveChanges();

                MessageBox.Show("Xml saved successfully!");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString());
            }
        }

        public static StringWriter Serialize(object o)
        {
            var xs = new XmlSerializer(o.GetType());
            var xml = new StringWriter();
            xs.Serialize(xml, o);

            return xml;
        }




        //protected void btnDeleteFixture_Click(object sender, EventArgs e)
        //{
        //    int fixtureId = int.Parse(txtFixtureID.Text);

        //    if (fixtureId != null)
        //    {
        //        Context _db = new Context();

        //        var fixtureRow = _db.Fixtures.First(f => f.FixturesId == fixtureId);

        //        Fixture fixture = (Fixture)fixtureRow;

        //        _db.Fixtures.Remove(fixture);
        //        _db.SaveChanges();

        //        txtFixtureID.Text = String.Empty;

        //        MessageBox.Show("Fixture removed");

        //        PrimeTablesForCoach();
        //    }
        //    else
        //    {
        //        MessageBox.Show("Please enter user ID");
        //    }
            
        //}

        protected void btnAddFixture_Click(object sender, EventArgs e)
        {
            //EnableFixtureValidation();

            Context _db = new Context();

            Fixture newFixture = new Fixture();

            newFixture.HomeTeam = txtHomeTeam.Text;
            newFixture.AwayTeam = txtAwayTeam.Text;
            newFixture.PitchName = txtPitchName.Text;
            DateTime date = DateTime.Parse(txtDate.Text);
            newFixture.FutureMatchDate = date;
            _db.Fixtures.Add(newFixture);
            _db.SaveChanges();

            PrimeTablesForCoach();

            ClearFixtureFields();

            ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "alertMessage", "alert('New Fixture Added')", true);
        }



        //Clear the fields
        private void ClearFixtureFields()
        {
            txtHomeTeam.Text = String.Empty;
            txtAwayTeam.Text = String.Empty;
            txtPitchName.Text = String.Empty;
            txtDate.Text = String.Empty;
        }



        protected void btnAddResult_Click(object sender, EventArgs e)
        {

            Context _db = new Context();

            GameResult newGameResult = new GameResult();

            newGameResult.HomeTeam = txtHomeTeamResults.Text;
            newGameResult.AwayTeam = txtAwayTeamResults.Text;
            newGameResult.ScoreAway = int.Parse(txtScoreAway.Text);
            newGameResult.ScoreHome = int.Parse(txtScoreHome.Text);
            DateTime date = DateTime.Parse(txtDateScores.Text);
            newGameResult.MatchDate = date;

            
            _db.GameResults.Add(newGameResult);
            _db.SaveChanges();

            PrimeTablesForCoach();

            ClearResultsFields();
            //this is just to show that we know how to do it by other means
            ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "alertMessage", "alert('New Result Added')", true);
        }


        //Clearing the fields
        private void ClearResultsFields()
        {
            txtHomeTeamResults.Text = String.Empty;
            txtAwayTeamResults.Text = String.Empty;
            txtScoreAway.Text = String.Empty;
            txtScoreHome.Text = String.Empty;
            txtDateScores.Text = String.Empty;
        }




        //Handler for removing fixtures
        protected void dgvFixtures_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            int id = int.Parse(e.Values[0].ToString());

            //Context _db = new Context();


            if (id != null)
            {
                Context _db = new Context();

                var fixtureRow = _db.Fixtures.First(f => f.FixturesId == id);

                Fixture fixture = (Fixture)fixtureRow;

                _db.Fixtures.Remove(fixture);
                _db.SaveChanges();

                //txtFixtureID.Text = String.Empty;

                MessageBox.Show("Fixture removed");

                PrimeTablesForCoach();
            }
            else
            {
                MessageBox.Show("Please enter user ID");
            }
        }



        //Handler for removing Results
        protected void dgvResults_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            int id = int.Parse(e.Values[0].ToString());

            //Context _db = new Context();


            if (id != null)
            {
                Context _db = new Context();

                var resultRow = _db.GameResults.First(f => f.GameID == id);

                GameResult result = (GameResult)resultRow;

                _db.GameResults.Remove(result);
                _db.SaveChanges();

                //txtFixtureID.Text = String.Empty;

                MessageBox.Show("Result removed");

                PrimeTablesForCoach();
            }
            else
            {
                MessageBox.Show("Please enter user ID");
            }
        }

      
        
    }
}